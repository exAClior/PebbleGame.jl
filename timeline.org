#+title: Timeline of Pebble Game for analyzing the space-time complexity of Computer Program
#+author: Yusheng Zhao
#+options: toc:nil
#+date: today

* Purpose
Over the time of 1988 to 2004, the speed of computation has improved around 58
percent yearly while memory bandwidth and latency have only improved 26% and 5%
[[cite:&marchalPartPebblegameModels]]. The ever increasing gap between computation
power and data acquisition bottlenecks actual computation. Without hardware
improvement for data acquisition, it is desirable to optimize computational
steps by shuffling computation order.

The pebble game is a tool to analyze such space-time complexity of a computer
program.

* Black Pebble Game
Originally, (black) pebble game was introduced in
[[cite:&sethiCompleteRegisterAllocation1973]] to study the time-space complexity
trade off of evaluating a piece of straight-line program. A straight-line
program is one without branch or loops. A pebble game converts such a
straight-line program into a directed acyclic graph. Gates in the program are
represented by vertices. Vertex A has an outgoing edge into vertex B if the
output of the gate represented by vertex A is the input of the gate represented
by gate B. Final results of a program is represented by vertices with no
outgoing edges. Pebbling a vertex represents computation of a gate. The goal of
the game is to pebble all output vertices at least once each while following
some constraints and with as few pebbles existing simultaneously as possible and
as few pebble operations as possible. In the original pebble, there are two
constraints for pebbling and unpebbling.

To pebble a vertex, all vertices with outgoing edge towards the vertex needs to
be pebbled already. To unpebble a vertex, the vertex must be already pebbled.
The vertices representing the inputs can be pebbled with no constraint.

For example, [[cite:&marchalPartPebblegameModels]] gives the pebble game setup of
the computation $7 + (5 − z) × (1 + x) − (1 + x − t)/(2 + z) + v$ as follows
[[file:resources/Screenshot 2024-05-09 at 20.15.04.png][pebble game example]].

** Optimal Strategy
There are multiple types of optimal strategy for pebble game. We discuss them
separately.

*** Miminal Space Stragey
In a series of paper
[[cite:&sethiCompleteRegisterAllocation1973;&louiMinimumRegisterAllocation1979;&gilbertPebblingProblemComplete1980]],
better understanding was developed on the complexity class of minimal space
strategy. A 3-SAT problem can be solved by reducing it into a pebble game as
described in [[cite:&sethiCompleteRegisterAllocation1973]]. Therefore, whether it is
possible to play a pebble game with $k$ pebbles is an NP-complete problem.
Conversely, the state of the art solution towards a $k$ pebble game will be
provided by first converting the pebble game into a SAT problem and then using a
SOTA solve for SAT problem documented in [[https://en.wikipedia.org/wiki/SAT_solver][Wikipedia]]. In order to get the minimal
pebbles needed for the pebble game on a DAG, it was shown that it is in
$PSPACE-complete$ complexity class
[[cite:&louiMinimumRegisterAllocation1979;&gilbertPebblingProblemComplete1979]].

In conclusion, we now understand that asking about the minimal space for
carrying out a computation is hard, $PSAPCE-complete$ hard. Nevertheless, there
are three areas un-explored. Firstly, the complexity conclusion was towards a
DAG with no structure. We could expect more efficient solution when the circuit,
hence the DAG, has some structure. For example, when the computation being
carried out is FFT, the DAG could be dividied into identical completely balanced
binary trees. [[cite:&ModelsComputationExploring]]. Secondly, we may trade space for
time during computation [[cite:&gilbertPebblingProblemComplete1979]]. For example,
by giving one extra pebble you may save much running time. Lastly, operations
allowed in this model is limited and it corresponds to irreversible and
straight-line programs. Are there any variants of pebble games that could be
used to analyze other computational models?

*** DAG with structure

For results regarding DAG with structure, a collection of results regarding DAG
for FFT, DFT, and etc are recorded in Chapter 10 of
[[cite:&ModelsComputationExploring]]. One example is: if the DAG of the program is a
completely balanced tree of level $k$, we may use recursive proof to derive the
lower bound on memory used being $k+1$ pebbles.

*** Space-Time Trade Off
If however, the DAG in the pebble game is of specific format such as a tree,
special algorithm will apply.

*** TODO Next
- [[https://arxiv.org/pdf/1307.3913][Section 1.2]] Reversible pebblings have been studied in [LV96, Kr´a04, KSS18]
  and have been used to prove timespace trade-offs in reversible simulation of
  irreversible computation in [LTV98, LMT00, Wil00, BTV01]. In a different
  context, Potechin [Pot10] implicitly used reversible pebbling to
obtain lower bounds in monotone space complexity, with the connection made
explicit in later works [CP14, FPRC13]. The paper [CLNV15] (to which this
overview is indebted) studied the relative power of standard and reversible
pebblings with respect to space, and also established PSPACE-hardness results
for estimating the minimum space required to pebble graphs (reversibly or not)
- https://scholar.google.com/scholar?hl=en&as_sdt=2005&sciodt=0,5&cites=13901390982843745322&scipsc=&q=&scisbd=1
*** Variants
- What are their each complexity.
- Progressive Pebble Game

**** Dymond and Tompa Pebble Game
For modeling the time and space complexity of parallel computing
[[cite:&liuRedBlueStandardPebble]].

**** Red Black Pebble Game
Red-blue pebble game is used to study I/O complexity. In the thesis
[[cite:&liuRedBlueStandardPebble]], addative complexity was also shown to be
PSPACE-hard.

**** Reversible Pebble Game
For modeling reversible computing.

**** Black White Pebble Game
For modeling non-deterministic computing.

* Reversible Pebble Game
What is the state of the art?
What is the con


* Spooky Pebble Game
Why this?
What is the state of the art?

* What remains
- Non-line program? what are the model for
- MCTS for solving pebble game?

* Appendix
** PSPACE
To investigate complexity of a problem $\mathcal{Q}$ under the physical constraint of
limited physical space, we propose a new complexity class $SPACE(f(n))$.
Problems in $SPACE(f(n))$ can be solved by a bounded-memory $Random Access
Machine$ model with read-only access to the input of a problem and $O(f(n))$
amount of memory [[cite:&mooreNatureComputation2011]]. A bounded-memory $Random
Access Machine$ model is one where there exists two components, A CPU and a
Random Access Memory. A CPU can request data from arbitrary address $adr$ and
execute command upon receiving data. A $Random Access Memory$ can accept an
address request and output data in $O(1)$ time.

$PSPACE$ is the complexity class of a the collection $SPACE(n^c)$ for $0<= c <=
\inf$.

** Other usecases
Besides studying of space-time complexity in computation. Pebble game model has
also seen its usage in many other fields. I merely list them here without
understanding much.
- [[https://arxiv.org/pdf/2001.02481][Nullstellensatz Size-Degree Trade-offs from Reversible Pebbling]] is about proof
  complexity
- [[https://arxiv.org/pdf/1802.07433][Static-Memory-Hard Functions and Nonlinear Space-Time
Tradeoffs via Pebbling]] is about cryptography, hash-function.
- [[http://kth.diva-portal.org/smash/get/diva2:1094244/FULLTEXT01.pdf][Proof system thesis]]: resources required for a propositional proof system and
  [[https://arxiv.org/pdf/1307.3913][paper]] , [[https://arxiv.org/pdf/1307.3913][paper2]] too.

** People
- [[https://jakobnordstrom.se/][Jakob Nordstorm]]
* Bibliography
** References
   :PROPERTIES:
   :beamer_opt: allowframebreaks
   :END:
   bibliographystyle:apalike
   [[bibliography:./pebblegame.bib][bibliography:./pebblegame.bib]]
